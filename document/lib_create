1、vim test.h、test.c和main.c；
test.h为该函数库的头文件。test.c是函数库的源程序，其中包含函数test，该函数将在屏幕上输出printf("test for lib.\n")；

main.c为测试库文件的主程序，在主程序中调用了公用函数test。 

2、将test.c编译成test.o文件；

无论静态库，还是动态库，都是由.o文件创建的。因此，我们先将源程序test.c通过gcc先编译成.o文件。

gcc -o test.o -c test.c

3、由test.o文件创建静态库；

静态库文件名的命名规范是以lib为前缀，紧接着跟静态库名，扩展名为.a。

例如：我们将创建的静态库名为 mytest，则静态库文件名就是libmytest.a。在创建和使用静态库时，需要注意这点。

创建静态库用ar命令。

在系统提示符下键入以下命令将创建静态库文件libmytest.a。

# ar cr libmytest.a test.o

 

4、使用静态库；

静态库制作完了，如何使用它内部的函数呢？

只需要在使用到这些函数的源程序中包含这些公用函数的原型声明，然后在用gcc命令生成目标文件时指明静态库名，gcc将会从静态库中将公用函数连接到目标文件中。注意，gcc会在静态库名前加上前缀lib，然后追加扩展名.a得到的静态库文件名来查找静态库文件。

在main.c中，我们包含了静态库的头文件test.h，然后在主程序main中直接调用公用函数test。下面

先生成目标程序test，然后运行test程序看看结果如何。

# gcc -o test main.c -L. -lmytest

 

5、由.o文件创建动态库文件；

动态库文件名命名规范和静态库文件名命名规范类似，也是在动态库名增加前缀lib，但其文件扩展名为.so。例如：我们将创建的动态库名为mytest，则动态库文件名就是libmytest.so。用gcc来创建动态库。

在系统提示符下键入以下命令得到动态库文件libmytest.so。

# gcc -shared -fPCI -o libmytest.so test.o

 

6、使用动态库；

在程序中使用动态库和使用静态库完全一样，也是在使用到这些公用函数的源程序中包含这些公用函数的原型声明，然后在用gcc命令生成目标文件时指明动态库名进行编译。我们先运行gcc命令生成目标文件，再运行它看看结果。

# gcc -o test main.c -L. -lmytest 

